class Rent(models.Model):
    rent = models.IntegerField(unique=True)

    def __str__(self):
        return str(self.amount)


class Type(models.Model):
    type = models.CharField(max_length=50, unique=True)

    def __str__(self):
        return self.name



class House(models.Model):
    STATUS_CHOICES = [
        ('Available', 'Available'),
        ('Occupied', 'Occupied'),
        ('For Sale', 'For Sale'),
    ]

    TYPE_CHOICES = [
        ('Bedsitter', 'Bedsitter'),
        ('One Bedroom', 'One Bedroom'),
        ('Two Bedroom', 'Two Bedroom'),
        ('Apartment', 'Apartment'),
        ('Shop', 'Shop'),
    ]

    LOCATION_CHOICES = [
        ('Ole Kasasi A', 'Ole Kasasi A'),
        ('Ole Kasasi B', 'Ole Kasasi B'),
        ('Tumaini', 'Tumaini'),
        ('Sironik Road', 'Sironik Road'),
        ('Mayor Road', 'Mayor Road'),
        ('Masai Lodge Road', 'Masai Lodge Road'),
        ('Naivas', 'Naivas'),
        ('Tuskys', 'Tuskys'),
        ('Kware', 'Kware'),
        ('Gataka Road', 'Gataka Road'),
    ]

    RENT_CHOICES = [
        (str(amount), str(amount)) for amount in range(6500, 30500, 500)
    ]

    landlord = models.ForeignKey(
        'Landlord', on_delete=models.CASCADE, related_name="houses"
    )
    name = models.CharField(max_length=100)
    status = models.CharField(max_length=30, choices=STATUS_CHOICES, default='Occupied')
    location = models.CharField(max_length=40, choices=LOCATION_CHOICES)
    coordinates = models.CharField(max_length=100, blank=True, null=True)
    dateadded = models.DateTimeField(default=timezone.now)
    main_image = models.ImageField(
        upload_to=house_main_image_upload_to,
        null=True,
        blank=True,
        help_text="Upload the main image for the house",
    )
    # rent = models.CharField(max_length=30, choices=RENT_CHOICES)
    rent = models.CharField(
        max_length=255, 
        choices=RENT_CHOICES, 
        blank=True,
        help_text="Comma-separated list of selected rent amounts"
    )
    type = models.CharField(max_length=255, choices=TYPE_CHOICES,
    blank=True,
    help_text="Comma-separated list of selected types")
    agent_name = models.CharField(max_length=100)
    agent_phone = models.CharField(max_length=20)
    description = models.TextField(blank=True, null=True)
    pros = models.TextField(blank=True, null=True)

    class Meta:
        ordering = ['-dateadded']

    def save(self, *args, **kwargs):
        if self.pk:  # Handle updates for existing records
            old_instance = House.objects.get(pk=self.pk)

            # Rename folder and move files if name changes
            if old_instance.name != self.name:
                old_folder = os.path.join(settings.MEDIA_ROOT, 'houses', old_instance.name)
                new_folder = os.path.join(settings.MEDIA_ROOT, 'houses', self.name)

                if os.path.exists(old_folder):
                    os.rename(old_folder, new_folder)

                # Update main image path
                if self.main_image and os.path.exists(self.main_image.path):
                    old_image_path = self.main_image.path
                    new_image_path = old_image_path.replace(old_folder, new_folder)
                    os.makedirs(os.path.dirname(new_image_path), exist_ok=True)
                    os.rename(old_image_path, new_image_path)
                    self.main_image.name = self.main_image.name.replace(
                        f"houses/{old_instance.name}/", f"houses/{self.name}/"
                    )

            # Delete old main image if it's replaced
            if old_instance.main_image != self.main_image and old_instance.main_image:
                old_instance.main_image.delete(save=False)

        super().save(*args, **kwargs)

    def delete(self, *args, **kwargs):
        # Delete folder and its contents when the house is deleted
        house_folder = os.path.join(settings.MEDIA_ROOT, 'houses', self.name)
        if os.path.exists(house_folder):
            for root, dirs, files in os.walk(house_folder, topdown=False):
                for file in files:
                    os.remove(os.path.join(root, file))
                for dir in dirs:
                    os.rmdir(os.path.join(root, dir))
            os.rmdir(house_folder)

        # Delete the main image
        if self.main_image:
            self.main_image.delete(save=False)

        super().delete(*args, **kwargs)

    def __str__(self):
        return f"{self.name} - {self.location} ({self.type}, {self.status}, {self.rent})"
    
